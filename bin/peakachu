#!/usr/bin/env python3

"""Peak calling tool for CLIP-seq data"""
import sys
import argparse
from peakachulib.controller import Controller
from peakachulib.float_range import frac_float

__author__ = "Thorsten Bischler"
__copyright__ = ("2017-2021 by Thorsten Bischler"
                 " <thorsten.bischler@uni-wuerzburg.de>")
__license__ = "ISC license"
__email__ = "thorsten.bischler@uni-wuerzburg.de"
__version__ = "0.2.0"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--version", "-v", default=False, action="store_true",
        help="show version")
    subparsers = parser.add_subparsers(help="commands")

    # Arguments for sliding window approach
    window_parser = subparsers.add_parser(
        "window", help="Define peaks using a sliding window approach where "
        "experiment and control libraries are compared for each window")
    window_parser.set_defaults(func=window_approach)
    window_parser.add_argument('-t', "--exp_libs", nargs='+', required=True)
    window_parser.add_argument('-c', "--ctr_libs", nargs='+', required=True)
    window_parser.add_argument(
        '-r', "--pairwise_replicates", action='store_true', default=False)
    window_parser.add_argument(
        '-P', "--paired_end", action='store_true', default=False)
    window_parser.add_argument('-M', "--max_insert_size", type=int, default=50)
    window_parser.add_argument('-g', "--gff_folder")
    window_parser.add_argument("--features", nargs='*', default=[])
    window_parser.add_argument("--sub_features", nargs='*', default=[])
    window_parser.add_argument('-p', "--max_proc", type=int, default=1)
    window_parser.add_argument('-w', "--window_size", type=int, default=25)
    window_parser.add_argument('-l', "--step_size", type=int, default=5)
    window_parser.add_argument('-d', "--stat_test", default="gtest",
                               choices=["gtest", "deseq"])
    window_parser.add_argument(
        '-n', "--norm_method", default="tmm",
        choices=["tmm", "deseq", "count", "manual", "none"])
    window_parser.add_argument(
        '-s', "--size_factors", type=float, nargs='*',
        help="Normalization factors for libraries in input order (first "
        "experiment then control libraries)")
    window_parser.add_argument(
        '-m', "--mad_multiplier", type=float, default=2.0)
    window_parser.add_argument(
        '-f', "--fc_cutoff", type=float, default=2.0)
    window_parser.add_argument(
        '-H', "--het_p_val_threshold", type=float, default=0.01)
    window_parser.add_argument(
        '-R', "--rep_pair_p_val_threshold", type=float, default=0.05)
    window_parser.add_argument(
        '-Q', "--padj_threshold", type=float, default=0.05)
    window_parser.add_argument('-o', "--output_folder", default="./")

    # Arguments for predefined peak approach
    adaptive_parser = subparsers.add_parser(
        "adaptive", help="Define peaks using shape-dependent "
        "predefined peaks based on experiment libraries and subsequent "
        "comparison to a control")
    adaptive_parser.set_defaults(func=adaptive_approach)
    adaptive_parser.add_argument('-t', "--exp_libs", nargs='+', required=True)
    adaptive_parser.add_argument('-c', "--ctr_libs", nargs='*', default=[])
    adaptive_parser.add_argument('-r', "--pairwise_replicates",
                                 action='store_true', default=False)
    adaptive_parser.add_argument('-P', "--paired_end",
                                 action='store_true', default=False)
    adaptive_parser.add_argument('-M', "--max_insert_size", type=int,
                                 default=50)
    adaptive_parser.add_argument('-g', "--gff_folder")
    adaptive_parser.add_argument("--features", nargs='*', default=[])
    adaptive_parser.add_argument("--sub_features", nargs='*', default=[])
    adaptive_parser.add_argument('-p', "--max_proc", type=int, default=1)
    adaptive_parser.add_argument(
        '-b', "--blockbuster_path", default="blockbuster.x",
        help="Location of blockbuster executable. Per default required to be"
        " on the $PATH.")
    adaptive_parser.add_argument(
        '-C', "--min_cluster_expr_frac", type=frac_float, default=0.01,
        help="Minimum fraction of the blockbuster cluster expression that a "
        "maximum block needs to have for further consideration")
    adaptive_parser.add_argument(
        '-O', "--min_block_overlap", type=frac_float, default=0.5,
        help="Minimum fraction of "
        "the width of the current maximum block that has to overlap with a "
        "subblock to consider it for peak merging")
    adaptive_parser.add_argument(
        '-B', "--min_max_block_expr_frac", type=frac_float, default=0.1,
        help="Minimum fraction of the expression of the current maximum block "
        "that a subblock needs to have to consider it for peak merging")
    adaptive_parser.add_argument(
        '-n', "--norm_method", default="deseq",
        choices=["deseq", "manual", "none"])
    adaptive_parser.add_argument(
        '-s', "--size_factors", type=float, nargs='*',
        help="Normalization factors for libraries in input order "
        "(first experiment then control libraries)")
    adaptive_parser.add_argument(
        '-m', "--mad_multiplier", type=float, default=2.0)
    adaptive_parser.add_argument(
        '-f', "--fc_cutoff", type=float, default=2.0)
    adaptive_parser.add_argument(
        '-Q', "--padj_threshold", type=float, default=0.05)
    adaptive_parser.add_argument('-o', "--output_folder", default=".")

    # Arguments for normalized coverage generation
    coverage_parser = subparsers.add_parser(
        "coverage", help="Generate normalized coverage files in wiggle format "
        "for each library and strand")
    coverage_parser.set_defaults(func=coverage)
    coverage_parser.add_argument("project_folder")
    coverage_parser.add_argument('-p', "--max_proc", type=int, default=1)

    # Arguments for consenus peak generation
    consensus_peak_parser = subparsers.add_parser(
        "consensus_peak", help="Plot consensus peak for previously called "
        "peaks based on coverage files")
    consensus_peak_parser.set_defaults(func=consensus_peak)
    consensus_peak_parser.add_argument("project_folder")
    consensus_peak_parser.add_argument(
        '-l', "--consensus_length", type=int, default=100,
        help="Length of the region around peak centers for plotting consensus "
        "peaks")

    try:
        args = parser.parse_args()
    except IOError as msg:
        parser.error(str(msg))
    if args.version is True:
        print("PEAKachu version " + __version__)
    elif "func" in dir(args):
        controller = Controller(args)
        args.func(controller)
    else:
        parser.print_help()


def window_approach(controller):
    controller.window_approach()


def adaptive_approach(controller):
    controller.adaptive_approach()


def coverage(controller):
    controller.coverage()


def consensus_peak(controller):
    controller.consensus_peak()


if __name__ == "__main__":
    sys.exit(main())
